以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。
按照约定俗成的管理，应该始终坚持使用4个空格的缩进。
此外，IDE很难像格式化Java代码那样格式化Python代码。
Python程序是大小写敏感的，如果写错了大小写，程序会报错。



———————————————————————————————————————
数据类型：整数、浮点数、字符串

如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
'I\'m \"OK\"!'
表示的字符串内容是：
I'm "OK"!

转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\，可以在Python的交互式
命令行用print()打印字符串看看：

>>> print('I\'m ok.')
I'm ok.

>>> print('I\'m learning\nPython.')
I'm learning
Python.

>>> print('\\\n\\')
\
\

如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：
>>> print('\\\t\\')
\       \

>>> print(r'\\\t\\')
\\\t\\


布尔值
布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直
接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：
>>> True
True

>>> False
False

>>> 3 > 2
True

>>> 3 > 5
False

布尔值可以用and、or和not运算。
and运算是与运算，只有所有都为True，and运算结果才是True：
or运算是或运算，只要其中有一个为True，or运算结果就是True：
not运算是非运算，它是一个单目运算符，把True变成False，False变成True：


空值
空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。


变量
在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，
例如：
a = 123   # a是整数
print(a)
a = 'ABC'  # a变为字符串
print(a)

这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不
匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：
int a = 123; // a是整数类型变量
a = "ABC"; // 错误：不能把字符串赋给整型变量
和静态语言相比，动态语言更灵活，就是这个原因。




常量
所谓常量就是不能变的变量。在Python中，通常用全部大写的变量名表示常量：
PI = 3.14159265359

在Python中，有两种除法，一种除法是/：
>>> 10 / 3
3.3333333333333335

/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：
>>> 9 / 3
3.0

还有一种除法是//，称为地板除，两个整数的除法仍然是整数：
>>> 10 // 3
3

整数运算结果永远是精确的。


小结
Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向
这些数据对象的，对变量赋值就是把数据和变量给关联起来。
对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。

注意：Python的整数没有大小限制
Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。

